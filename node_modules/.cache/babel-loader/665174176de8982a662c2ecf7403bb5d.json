{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/code/MOD4/ruinme/ruinme-frontend/src/HigherOrderConcerns/getAuthState.jsx\";\nimport React, { Component } from 'react';\nimport { fetchCurrentUser } from '../store/actions/users';\nimport { connect } from 'react-redux';\n\nfunction SetsAuthUserState(WrappedComponent) {\n  // ...and returns another component...\n  const fn = class extends Component {\n    constructor(props) {\n      super(props);\n    }\n\n    componentDidMount() {\n      // ... that takes care of the subscription...\n      if (localStorage.getItem(\"token\")) {\n        this.props.getCurrentUser();\n      } else {\n        this.props.history.push(\"/login\");\n      }\n    }\n\n    render() {\n      // ... and renders the wrapped component with the fresh data!\n      // Notice that we pass through any additional props\n      return React.createElement(WrappedComponent, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }));\n    }\n\n  };\n  return connect(null, mapDispatchToProps)(SetsAuthUserState);\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCurrentUser: () => dispatch(fetchCurrentUser())\n  };\n};\n\nexport default SetsAuthUserState;","map":{"version":3,"sources":["/Users/flatironschool/Development/code/MOD4/ruinme/ruinme-frontend/src/HigherOrderConcerns/getAuthState.jsx"],"names":["React","Component","fetchCurrentUser","connect","SetsAuthUserState","WrappedComponent","fn","constructor","props","componentDidMount","localStorage","getItem","getCurrentUser","history","push","render","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,SAAQC,gBAAR,QAA+B,wBAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,SAASC,iBAAT,CAA2BC,gBAA3B,EAA6C;AACzC;AACA,QAAMC,EAAE,GAAG,cAAcL,SAAd,CAAwB;AACjCM,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AACD;;AAEDC,IAAAA,iBAAiB,GAAG;AAClB;AACA,UAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AAC/B,aAAKH,KAAL,CAAWI,cAAX;AACH,OAFD,MAGK;AACD,aAAKJ,KAAL,CAAWK,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACF;;AAGDC,IAAAA,MAAM,GAAG;AACP;AACA;AACA,aAAO,oBAAC,gBAAD,oBAAsB,KAAKP,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AApBgC,GAAnC;AAuBA,SAAOL,OAAO,CAAC,IAAD,EAAOa,kBAAP,CAAP,CAAkCZ,iBAAlC,CAAP;AACD;;AAED,MAAMY,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AAAEL,IAAAA,cAAc,EAAE,MAAKK,QAAQ,CAACf,gBAAgB,EAAjB;AAA/B,GAAP;AACH,CAFD;;AAMA,eAAeE,iBAAf","sourcesContent":["import React, { Component} from 'react'\nimport {fetchCurrentUser} from '../store/actions/users'\nimport { connect } from 'react-redux'\n\nfunction SetsAuthUserState(WrappedComponent) {\n    // ...and returns another component...\n    const fn = class extends Component {\n      constructor(props) {\n        super(props);\n      }\n  \n      componentDidMount() {\n        // ... that takes care of the subscription...\n        if (localStorage.getItem(\"token\")) {\n            this.props.getCurrentUser()\n        }\n        else {\n            this.props.history.push(\"/login\")\n        }\n      }\n     \n  \n      render() {\n        // ... and renders the wrapped component with the fresh data!\n        // Notice that we pass through any additional props\n        return <WrappedComponent {...this.props} />;\n      }\n    };\n\n    return connect(null, mapDispatchToProps)(SetsAuthUserState);\n  }\n\n  const mapDispatchToProps = dispatch => {\n      return { getCurrentUser: ()=> dispatch(fetchCurrentUser())}\n  }\n\n \n\n  export default SetsAuthUserState"]},"metadata":{},"sourceType":"module"}